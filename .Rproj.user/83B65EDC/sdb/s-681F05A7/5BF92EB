{
    "contents" : "Headcount Analysis - Course Project for Shiny Application\n========================================================\nauthor: Jose Alberto Valdez Crespo\ndate: January 30, 2016\n\nProject Overview\n========================================================\n\nThis app provides dymanic filtering of a headcount file based on Geographical Region, Country & State. It has a couple of tabs that represent a dynamic table view of the data, plus a summary view.\n\n- Source file \"Headcount.csv\" was built in-house. Not from a public source.\n- Shiny apps address:http://javcsjc.shinyapps.io/FinalProject\n- gitHub address: https://github.com/javcsjc/FinalProject\n\n\nui.R\n========================================================\n\n```{r}\nlibrary(shiny)\nlibrary(DT)\nheadcount <- read.csv(\"./data/Headcount.csv\")\n\n# Define the overall UI\nshinyUI(\n        fluidPage(\n                titlePanel(\"Headcount Analysis\"),\n                sidebarLayout(\n                        sidebarPanel(\n                                selectInput(\"region\",\n                                            \"Region:\",\n                                            c(\"All\",\n                                              unique(as.character(headcount$Region)))),\n                                br(),\n                                selectInput(\"country\",\n                                            \"Country:\",\n                                            c(\"All\",\n                                              unique(as.character(headcount$Country)))),\n                                br(),\n                                selectInput(\"state\",\n                                            \"State:\",\n                                            c(\"All\",\n                                              unique(as.character(headcount$State))))\n                                ),\n                        \n                        # Show a tabset that includes a plot, summary, and table view\n                        # of the generated distribution\n                        mainPanel(\n                                tabsetPanel(type = \"tabs\", \n                                            tabPanel(\"Table\", DT::dataTableOutput(\"table\")),\n                                            tabPanel(\"Summary\", verbatimTextOutput(\"summary\"))\n                                        )\n                                )\n        )\n))\n```\n\nserver.R\n========================================================\n\n```{r}\nlibrary(shiny)\nlibrary(DT)\nheadcount <- read.csv(\"./data/Headcount.csv\")\n\n# Define a server for the Shiny app\nshinyServer(function(input, output) {\n        headcountInput <- reactive({\n                data <- headcount\n                if (input$region != \"All\") {\n                        data <- data[data$Region == input$region,]\n                }\n                if (input$country != \"All\") {\n                        data <- data[data$Country == input$country,]\n                }\n                if (input$state != \"All\") {\n                        data <- data[data$State == input$state,]\n                }\n                data\n        })\n        \n        # Filter data based on selections\n        output$table <- DT::renderDataTable(DT::datatable({\n                data <- headcount\n                if (input$region != \"All\") {\n                        data <- data[data$Region == input$region,]\n                }\n                if (input$country != \"All\") {\n                        data <- data[data$Country == input$country,]\n                }\n                if (input$state != \"All\") {\n                        data <- data[data$State == input$state,]\n                }\n                data\n        }))\n        # Generate a summary of the data\n        output$summary <- renderPrint({\n                summary(headcountInput())\n        })\n})\n```\n\nLast Thoughts\n========================================================\n\n- Started working on a Machine Learning comparison project, but ran into a couple of problems: 1.- Since I was comparing multiple algorithms, it took too long to run.Tried different things but none work as I expected 2.- ERROR: cannot coerce type 'closure' to vector of type 'character'.\n- Had to switch to another project at the very last minute. On this one, tried hard to create a ggplot of the dynamic data but ran into errors like: \"ggplot2 doesn't know how to deal with data of class reactive\".Just simply ran out of time.\n- Good luck everyone!",
    "created" : 1454271682152.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2682636141",
    "id" : "5BF92EB",
    "lastKnownWriteTime" : 1454273010,
    "path" : "~/Desktop/Coursera/Data Products/FinalProject/Headcount_Project.Rpres",
    "project_path" : "Headcount_Project.Rpres",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_presentation"
}